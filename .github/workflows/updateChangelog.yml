name: Update Changelog PR

permissions:
  pull-requests: write
  contents: write

on:
  workflow_run:
    workflows: [Get Changelog Entry]
    types:
      - completed

jobs:
  # if there is a changelog entry, check for PR Open
  download:
    runs-on: ubuntu-latest
    outputs:
      message: ${{ steps.pull.outputs.message }}
    steps:
      - name: 'Download artifact'
        uses: actions/github-script@v7
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "changelog_entry"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            const fs = require('fs');
            const path = require('path');
            const temp = '${{ runner.temp }}/artifacts';
            if (!fs.existsSync(temp)){
              fs.mkdirSync(temp);
            }
            fs.writeFileSync(path.join(temp, 'changelog_entry.zip'), Buffer.from(download.data));

      - name: 'Unzip artifact'
        run: unzip changelog_entry.zip -d "${{ runner.temp }}/artifacts"
      - name: 'Store entry'
        id: pull
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const temp = '${{ runner.temp }}/artifacts';
            const changelog_entry = Number(fs.readFileSync(path.join(temp, 'changelog_entry')));
            echo message="$changelog_entry"  >> $GITHUB_OUTPUT
  # check-for-changelog-entry
  changelog-entry:
    # if contains to check for bug, enhancement, feature
    if: ${{ contains(needs.download.outputs.message, '[BUG]') || contains(needs.download.outputs.message, '[ENHANCEMENT]') || contains(needs.download.outputs.message, '[FEATURE]') }}
    runs-on: ubuntu-latest
    outputs:
      optIn: ${{ steps.in.outputs.bool }}
      entry: ${{  needs.download.outputs.message  }}
    steps:
      - name: changelog entry opt in
        id: in
        continue-on-error: true
        run: echo "opted in to changelog entry" | echo bool="true" >> $GITHUB_OUTPUT
# if there is a changelog entry, check for PR Open
  update-changelog:
    if: needs.changelog-entry.outputs.optIn
    runs-on: ubuntu-latest
    needs: changelog-entry
    steps:
      - name: Check if PR exists
        id: check
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          prs=$(gh pr list \
              --repo "$GITHUB_REPOSITORY" \
              --json title \
              --label "changelog" \
              --jq 'length')
          if [[  $prs -gt 0  ]]; then
              echo "existing=true" >> "$GITHUB_OUTPUT"
          fi
      - uses: actions/checkout@v4
      - name: check for branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        run: |
          BRANCH=automated-changelog
          #TODO CHANGE API CALL BELOW TO MATCH AZURE REPO
          if gh api repos/rcskosir/Issues_GitHubActions/branches/$BRANCH > /dev/null 2>&1; then
            echo "Branch exists on remote..."
            git fetch origin $BRANCH
            git checkout $BRANCH
          else
            echo "Branch does not exist on remote, creating locally..."
            git checkout -b $BRANCH
          fi
          
      - name: Create pull request
      #if changelog PR isn't already open, open one
      #create a new PR, start with appending the release number and (unreleased)
        if: '!steps.check.outputs.existing'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          
          #new pull request for new release needs the headers all added to the top
          FILE="CHANGELOG.md"
          version=$(head -n 1 "$FILE")
          IFS='.' read major minor patch <<< "$version"
          ((minor++))
          patch=$(echo $patch | sed 's/ (.*)//')
          new_version="${major}.$minor.${patch} (Unreleased)"
          headers="${new_version}\n\nENHANCEMENTS:\n\nFEATURES:\n\nBUG FIXES:\n"
          temp_file=$(mktemp)
          echo -e "$headers" > "$temp_file"
          cat "$FILE" >> "$temp_file"
          mv "$temp_file" "$FILE"
          echo "File has been updated."

          major=$(echo $major | sed 's/## //')
          RELEASENUM="${major}.$minor.${patch}"

          git add CHANGELOG.md
          git commit -m "staring new changelog PR"
          git push --set-upstream origin automated-changelog
          echo "Creating a new pull request"
          gh pr create \
          --repo "$GITHUB_REPOSITORY" \
          --base main \
          --head automated-changelog \
          -l "changelog" \
          -t "CHANGELOG.md for $RELEASENUM" \
          -b "Automated changelog for next release, $RELEASENUM"
      
      - name: Set up Go
        uses: actions/setup-go@v3  # Set up go
        with:
          go-version: '1.20'

#      - name: Set up Python
#        uses: actions/setup-python@v4  # Set up Python environment
#       with:
#          python-version: '3.9'
      
      - name: Add commit message to changelog pull request
      # at this point a PR is opened for sure, now add entry
        env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          
          go run .github/workflows/update_changelog.go CHANGELOG.md '${{ needs.changelog-entry.outputs.entry }}'
          
          git add CHANGELOG.md
          git commit -m "Update changelog"
          git push --set-upstream origin automated-changelog
      
